{"ref":"8495a3fe-1a34-4041-b087-6a331e7600b2","syncData":{"version":1,"machineId":"ca48c6ff-071b-46c6-b60a-4f40162e7693","content":"{\"c.json\":\"{\\n\\t// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"cpp.code-snippets\":\"\",\"cpp.json\":\"{\\n\\t\\\"Start_without_test_case\\\": {\\n\\t\\t\\\"prefix\\\": \\\"start\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#include \\\\\\\"bits/stdc++.h\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"using namespace std;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"int main()\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\\\tlong long i, j, n;\\\",\\n\\t\\t\\t\\\"\\\\tlong long x=0, t, inp, sum = 0 $1;\\\",\\n\\t\\t\\t\\\"\\\\tcin>>${2:n;}\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Start_without_test_case\\\"\\n\\t},\\n\\t\\\"Start_with_test_case\\\": {\\n\\t\\t\\\"prefix\\\": \\\"test\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#include  \\\\\\\"bits/stdc++.h\\\\\\\"\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"using namespace std;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"int main()\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"    long long i, j, n;\\\",\\n\\t\\t\\t\\\"    long long x=0, t, inp, sum = 0 $1;\\\",\\n\\t\\t\\t\\\"    cin>>t;\\\",\\n\\t\\t\\t\\\"    while(t--)\\\",\\n\\t\\t\\t\\\"    {\\\",\\n\\t\\t\\t\\\"        cin>>${2:n;}\\\",\\n\\t\\t\\t\\\"        $0\\\",\\n\\t\\t\\t\\\"    }\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Start_with_test_case\\\"\\n\\t},\\n\\t\\\"array_n_inp\\\": {\\n\\t\\t\\\"prefix\\\": \\\"inarray\\\",\\n\\t\\t\\\"body\\\": [\\\"for(i = 0 ; i < ${1:n}; i++)\\\", \\\"cin>> ${2:arr}[i];\\\", \\\"$0\\\"],\\n\\t\\t\\\"description\\\": \\\"array_n_inp\\\"\\n\\t},\\n\\t\\\"array_dec_n_inp\\\": {\\n\\t\\t\\\"prefix\\\": \\\"linarray\\\",\\n\\t\\t\\\"body\\\": [\\\"long long ${1:arr}[${2:n}];\\\", \\\"for(i = 0 ; i < ${2:n}; i++)\\\", \\\"cin>> ${1:arr}[i];\\\", \\\"$0\\\"],\\n\\t\\t\\\"description\\\": \\\"array_n_inp\\\"\\n\\t},\\n\\t\\\"yes_printer\\\": {\\n\\t\\t\\\"prefix\\\": \\\"yes\\\",\\n\\t\\t\\\"body\\\": [\\\"cout<<\\\\\\\"YES\\\\\\\"<<endl;\\\", \\\"\\\"],\\n\\t\\t\\\"description\\\": \\\"yes_printer\\\"\\n\\t},\\n\\t\\\"Vowelcheker function\\\": {\\n\\t\\t\\\"prefix\\\": \\\"isvowel\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"bool isvowel(char ch)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"    return (ch == 'a') ||\\\",\\n\\t\\t\\t\\\"           (ch == 'e') ||\\\",\\n\\t\\t\\t\\\"           (ch == 'i') ||\\\",\\n\\t\\t\\t\\\"           (ch == 'o') ||\\\",\\n\\t\\t\\t\\\"           (ch == 'u') ||\\\",\\n\\t\\t\\t\\\"           (ch == 'A') ||\\\",\\n\\t\\t\\t\\\"           (ch == 'E') ||\\\",\\n\\t\\t\\t\\\"           (ch == 'I') ||\\\",\\n\\t\\t\\t\\\"           (ch == 'O') ||\\\",\\n\\t\\t\\t\\\"           (ch == 'U');\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Vowelcheker function\\\"\\n\\t},\\n\\t\\\"no_printer\\\": {\\n\\t\\t\\\"prefix\\\": \\\"no\\\",\\n\\t\\t\\\"body\\\": [\\\"cout<<\\\\\\\"NO\\\\\\\"<<endl;\\\", \\\"\\\"],\\n\\t\\t\\\"description\\\": \\\"no_printer\\\"\\n\\t},\\n\\t\\\"for simple\\\": {\\n\\t\\t\\\"prefix\\\": \\\"fori\\\",\\n\\t\\t\\\"body\\\": [\\\"for (i = 0; i < n; i++)\\\"],\\n\\t\\t\\\"description\\\": \\\"for simple\\\"\\n\\t},\\n\\t\\\"setter getter generator\\\": {\\n\\t\\t\\\"prefix\\\": \\\"var\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"${1:TYPE} ${2:VAR_NAME};\\\",\\n\\t\\t\\t\\\"$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"${1:TYPE} get_${2:VAR_NAME}()\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\\\t return ${2:VAR_NAME};\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"void set_${2:VAR_NAME}(${1:TYPE} ${2:VAR_NAME}_i)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\\\t${2:VAR_NAME}=${2:VAR_NAME}_i;\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"setter getter generator\\\"\\n\\t},\\n\\t\\\"prototype\\\": {\\n\\t\\t\\\"prefix\\\": \\\"varn\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"${1:type} ${2:VAR};\\\",\\n\\t\\t\\t\\\"$0\\\",\\n\\t\\t\\t\\\"${1:int} get_${2:VAR}();\\\",\\n\\t\\t\\t\\\"void set_${2:VAR}(${1:int} ${2:VAR}_i);\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"${1:type} ${CLASS}::get_${2:VAR}()\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\\\treturn ${2:VAR};\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"void ${CLASS}::set_${2:VAR}(${1:int} ${2:VAR}_i)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\\\t${2:VAR}=${2:VAR}_i;\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"prototype\\\"\\n\\t}\\n}\\n\",\"javascriptreact.json\":\"{\\n\\t// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"Print to console(cl)\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cl\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.log('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\t\\\"Print to console(log)\\\": {\\n\\t\\t\\\"prefix\\\": \\\"log\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.log('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t}\\n}\"}"}}