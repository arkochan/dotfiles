{
	"Start_without_test_case": {
		"prefix": "start",
		"body": [
			"#include \"bits/stdc++.h\"",
			"",
			"using namespace std;",
			"",
			"int main()",
			"{",
			"\tlong long i, j, n;",
			"\tlong long x=0, t, inp, sum = 0 $1;",
			"\tcin>>${2:n;}",
			"\t$0",
			"}",
			""
		],
		"description": "Start_without_test_case"
	},
	"Start_with_test_case": {
		"prefix": "test",
		"body": [
			"#include  \"bits/stdc++.h\"",
			"",
			"using namespace std;",
			"",
			"int main()",
			"{",
			"    long long i, j, n;",
			"    long long x=0, t, inp, sum = 0 $1;",
			"    cin>>t;",
			"    while(t--)",
			"    {",
			"        cin>>${2:n;}",
			"        $0",
			"    }",
			"}",
			""
		],
		"description": "Start_with_test_case"
	},
	"array_n_inp": {
		"prefix": "inarray",
		"body": ["for(i = 0 ; i < ${1:n}; i++)", "cin>> ${2:arr}[i];", "$0"],
		"description": "array_n_inp"
	},
	"array_dec_n_inp": {
		"prefix": "linarray",
		"body": ["long long ${1:arr}[${2:n}];", "for(i = 0 ; i < ${2:n}; i++)", "cin>> ${1:arr}[i];", "$0"],
		"description": "array_n_inp"
	},
	"yes_printer": {
		"prefix": "yes",
		"body": ["cout<<\"YES\"<<endl;", ""],
		"description": "yes_printer"
	},
	"Vowelcheker function": {
		"prefix": "isvowel",
		"body": [
			"bool isvowel(char ch)",
			"{",
			"    return (ch == 'a') ||",
			"           (ch == 'e') ||",
			"           (ch == 'i') ||",
			"           (ch == 'o') ||",
			"           (ch == 'u') ||",
			"           (ch == 'A') ||",
			"           (ch == 'E') ||",
			"           (ch == 'I') ||",
			"           (ch == 'O') ||",
			"           (ch == 'U');",
			"}"
		],
		"description": "Vowelcheker function"
	},
	"no_printer": {
		"prefix": "no",
		"body": ["cout<<\"NO\"<<endl;", ""],
		"description": "no_printer"
	},
	"for simple": {
		"prefix": "fori",
		"body": ["for (i = 0; i < n; i++)"],
		"description": "for simple"
	},
	"setter getter generator": {
		"prefix": "var",
		"body": [
			"${1:TYPE} ${2:VAR_NAME};",
			"$0",
			"",
			"${1:TYPE} get_${2:VAR_NAME}()",
			"{",
			"\t return ${2:VAR_NAME};",
			"}",
			"void set_${2:VAR_NAME}(${1:TYPE} ${2:VAR_NAME}_i)",
			"{",
			"\t${2:VAR_NAME}=${2:VAR_NAME}_i;",
			"}"
		],
		"description": "setter getter generator"
	},
	"prototype": {
		"prefix": "varn",
		"body": [
			"${1:type} ${2:VAR};",
			"$0",
			"${1:int} get_${2:VAR}();",
			"void set_${2:VAR}(${1:int} ${2:VAR}_i);",
			"",
			"${1:type} ${CLASS}::get_${2:VAR}()",
			"{",
			"\treturn ${2:VAR};",
			"}",
			"void ${CLASS}::set_${2:VAR}(${1:int} ${2:VAR}_i)",
			"{",
			"\t${2:VAR}=${2:VAR}_i;",
			"}",
			""
		],
		"description": "prototype"
	}
}
